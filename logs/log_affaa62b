***** Runner *****

· Creating environments
· Discovering benchmarks
·· Uninstalling from conda-py3.8-cython-joblib-numpy-pandas-scipy-threadpoolctl
·· Building affaa62b <main> for conda-py3.8-cython-joblib-numpy-pandas-scipy-threadpoolctl
·· Installing affaa62b <main> into conda-py3.8-cython-joblib-numpy-pandas-scipy-threadpoolctl
· Running 16 total benchmarks (1 commits * 1 environments * 16 benchmarks)
[  0.00%] · For scikit-learn commit affaa62b <main>:
[  0.00%] ·· Benchmarking conda-py3.8-cython-joblib-numpy-pandas-scipy-threadpoolctl
[  6.25%] ··· Setting up cluster:16                                           ok
[  6.25%] ··· cluster.KMeansBenchmark.peakmem_fit                             ok
[  6.25%] ··· ================ =========== ======== ===========
              --                                   init        
              ---------------------------- --------------------
               representation   algorithm   random   k-means++ 
              ================ =========== ======== ===========
                   dense          lloyd      119M       132M   
                   dense          elkan      155M       156M   
                   sparse         lloyd      210M       213M   
                   sparse         elkan      220M       221M   
              ================ =========== ======== ===========

[ 12.50%] ··· cluster.KMeansBenchmark.peakmem_predict                         ok
[ 12.50%] ··· ================ =========== ======== ===========
              --                                   init        
              ---------------------------- --------------------
               representation   algorithm   random   k-means++ 
              ================ =========== ======== ===========
                   dense          lloyd      106M       106M   
                   dense          elkan      106M       106M   
                   sparse         lloyd      114M       114M   
                   sparse         elkan      114M       114M   
              ================ =========== ======== ===========

[ 18.75%] ··· cluster.KMeansBenchmark.peakmem_transform                       ok
[ 18.75%] ··· ================ =========== ======== ===========
              --                                   init        
              ---------------------------- --------------------
               representation   algorithm   random   k-means++ 
              ================ =========== ======== ===========
                   dense          lloyd      140M       140M   
                   dense          elkan      140M       140M   
                   sparse         lloyd      135M       135M   
                   sparse         elkan      135M       135M   
              ================ =========== ======== ===========

[ 25.00%] ··· cluster.KMeansBenchmark.time_fit                                ok
[ 25.00%] ··· ================ =========== ============ ============
              --                                      init          
              ---------------------------- -------------------------
               representation   algorithm     random     k-means++  
              ================ =========== ============ ============
                   dense          lloyd      501±30ms    1.56±0.04s 
                   dense          elkan     1.97±0.08s   2.62±0.04s 
                   sparse         lloyd     1.15±0.04s   3.51±0.04s 
                   sparse         elkan     1.49±0.02s   3.96±0.02s 
              ================ =========== ============ ============

[ 31.25%] ··· cluster.KMeansBenchmark.time_predict                            ok
[ 31.25%] ··· ================ =========== ============ ============
              --                                      init          
              ---------------------------- -------------------------
               representation   algorithm     random     k-means++  
              ================ =========== ============ ============
                   dense          lloyd      6.13±2ms    5.86±0.6ms 
                   dense          elkan     6.07±0.3ms   5.62±0.4ms 
                   sparse         lloyd      24.2±4ms     26.2±6ms  
                   sparse         elkan     26.3±0.6ms    24.6±6ms  
              ================ =========== ============ ============

[ 37.50%] ··· cluster.KMeansBenchmark.time_transform                          ok
[ 37.50%] ··· ================ =========== ============ ============
              --                                      init          
              ---------------------------- -------------------------
               representation   algorithm     random     k-means++  
              ================ =========== ============ ============
                   dense          lloyd     91.9±0.9ms   91.7±0.5ms 
                   dense          elkan     91.5±0.5ms   91.7±0.4ms 
                   sparse         lloyd     3.64±0.03s   3.67±0.02s 
                   sparse         elkan     3.66±0.02s   3.66±0.02s 
              ================ =========== ============ ============

[ 43.75%] ··· cluster.KMeansBenchmark.track_test_score                        ok
[ 43.75%] ··· ================ =========== =========== =====================
               representation   algorithm      init                         
              ---------------- ----------- ----------- ---------------------
                   dense          lloyd       random     -5.011288642883301 
                   dense          lloyd     k-means++   -3.1141350269317627 
                   dense          elkan       random     -5.011288642883301 
                   dense          elkan     k-means++   -3.1141350269317627 
                   sparse         lloyd       random    -0.9265313744544983 
                   sparse         lloyd     k-means++   -0.9306698441505432 
                   sparse         elkan       random    -0.9265313744544983 
                   sparse         elkan     k-means++   -0.9306698441505432 
              ================ =========== =========== =====================

[ 50.00%] ··· cluster.KMeansBenchmark.track_train_score                       ok
[ 50.00%] ··· ================ =========== =========== =====================
               representation   algorithm      init                         
              ---------------- ----------- ----------- ---------------------
                   dense          lloyd       random     -4.988476276397705 
                   dense          lloyd     k-means++   -3.1168856620788574 
                   dense          elkan       random     -4.988476276397705 
                   dense          elkan     k-means++   -3.1168856620788574 
                   sparse         lloyd       random    -0.9219751358032227 
                   sparse         lloyd     k-means++   -0.9255540370941162 
                   sparse         elkan       random    -0.9219751358032227 
                   sparse         elkan     k-means++   -0.9255540370941162 
              ================ =========== =========== =====================

[ 56.25%] ··· Setting up cluster:65                                           ok
[ 56.25%] ··· cluster.MiniBatchKMeansBenchmark.peakmem_fit                    ok
[ 56.25%] ··· ================ ======== ===========
              --                       init        
              ---------------- --------------------
               representation   random   k-means++ 
              ================ ======== ===========
                   dense         108M       109M   
                   sparse        189M       191M   
              ================ ======== ===========

[ 62.50%] ··· ...ter.MiniBatchKMeansBenchmark.peakmem_predict                 ok
[ 62.50%] ··· ================ ======== ===========
              --                       init        
              ---------------- --------------------
               representation   random   k-means++ 
              ================ ======== ===========
                   dense         104M       104M   
                   sparse        120M       120M   
              ================ ======== ===========

[ 68.75%] ··· ...r.MiniBatchKMeansBenchmark.peakmem_transform                 ok
[ 68.75%] ··· ================ ======== ===========
              --                       init        
              ---------------- --------------------
               representation   random   k-means++ 
              ================ ======== ===========
                   dense         138M       138M   
                   sparse        135M       135M   
              ================ ======== ===========

[ 75.00%] ··· cluster.MiniBatchKMeansBenchmark.time_fit                       ok
[ 75.00%] ··· ================ ========== ============
              --                         init         
              ---------------- -----------------------
               representation    random    k-means++  
              ================ ========== ============
                   dense        271±20ms    294±10ms  
                   sparse       472±20ms   1.66±0.07s 
              ================ ========== ============

[ 81.25%] ··· cluster.MiniBatchKMeansBenchmark.time_predict                   ok
[ 81.25%] ··· ================ ============ ============
              --                          init          
              ---------------- -------------------------
               representation     random     k-means++  
              ================ ============ ============
                   dense        5.87±0.2ms   5.53±0.2ms 
                   sparse       21.0±10ms     34.6±8ms  
              ================ ============ ============

[ 87.50%] ··· cluster.MiniBatchKMeansBenchmark.time_transform                 ok
[ 87.50%] ··· ================ =========== ============
              --                         init          
              ---------------- ------------------------
               representation     random    k-means++  
              ================ =========== ============
                   dense         94.4±8ms   92.4±0.5ms 
                   sparse       7.37±0.1s   7.15±0.01s 
              ================ =========== ============

[ 93.75%] ··· ...er.MiniBatchKMeansBenchmark.track_test_score                 ok
[ 93.75%] ··· ================ =========== =====================
               representation      init                         
              ---------------- ----------- ---------------------
                   dense          random     -3.940943717956543 
                   dense        k-means++    -3.108213186264038 
                   sparse         random    -0.9376848340034485 
                   sparse       k-means++   -0.9521117806434631 
              ================ =========== =====================

[100.00%] ··· ...r.MiniBatchKMeansBenchmark.track_train_score                 ok
[100.00%] ··· ================ =========== =====================
               representation      init                         
              ---------------- ----------- ---------------------
                   dense          random     -3.95550537109375  
                   dense        k-means++   -3.1156556606292725 
                   sparse         random    -0.9334458708763123 
                   sparse       k-means++   -0.9480265974998474 
              ================ =========== =====================



***** Publish *****

[ 11.11%] · Loading machine info
[ 22.22%] · Getting params, commits, tags and branches
[ 33.33%] · Loading results
[ 33.33%] ·· Couldn't find 0fb307bf in branches (main)
[ 44.44%] · Detecting steps
[ 55.56%] · Generating graphs
[ 66.67%] · Generating output for SummaryGrid
[ 77.78%] · Generating output for SummaryList
[ 88.89%] · Generating output for Regressions
[100.00%] · Writing index


***** Dependencies *****

# packages in environment at /home/ubuntu/scikit-learn/asv_benchmarks/env/90ed7782ee9013f1c8d13fdff8043a99:
#
# Name                    Version                   Build  Channel
_libgcc_mutex             0.1                        main  
_openmp_mutex             5.1                       1_gnu  
blas                      1.0                         mkl  
bottleneck                1.3.5            py38h7deecbd_0  
ca-certificates           2022.10.11           h06a4308_0  
certifi                   2022.12.7        py38h06a4308_0  
cython                    0.29.32          py38h6a678d5_0  
fftw                      3.3.9                h27cfd23_1  
intel-openmp              2021.4.0          h06a4308_3561  
joblib                    1.1.1            py38h06a4308_0  
ld_impl_linux-64          2.38                 h1181459_1  
libffi                    3.4.2                h6a678d5_6  
libgcc-ng                 11.2.0               h1234567_1  
libgfortran-ng            11.2.0               h00389a5_1  
libgfortran5              11.2.0               h1234567_1  
libgomp                   11.2.0               h1234567_1  
libstdcxx-ng              11.2.0               h1234567_1  
mkl                       2021.4.0           h06a4308_640  
mkl-service               2.4.0            py38h7f8727e_0  
mkl_fft                   1.3.1            py38hd3c417c_0  
mkl_random                1.2.2            py38h51133e4_0  
ncurses                   6.3                  h5eee18b_3  
numexpr                   2.8.4            py38he184ba9_0  
numpy                     1.23.4           py38h14f4228_0  
numpy-base                1.23.4           py38h31eccc5_0  
openssl                   1.1.1s               h7f8727e_0  
packaging                 22.0             py38h06a4308_0  
pandas                    1.5.2            py38h417a72b_0  
pip                       22.3.1           py38h06a4308_0  
python                    3.8.15               h7a1cb2a_2  
python-dateutil           2.8.2              pyhd3eb1b0_0  
pytz                      2022.7           py38h06a4308_0  
readline                  8.2                  h5eee18b_0  
scikit-learn              1.3.dev0                 pypi_0    pypi
scipy                     1.9.3            py38h14f4228_0  
setuptools                65.5.0           py38h06a4308_0  
six                       1.16.0             pyhd3eb1b0_1  
sqlite                    3.40.0               h5082296_0  
threadpoolctl             2.2.0              pyh0d69192_0  
tk                        8.6.12               h1ccaba5_0  
wheel                     0.37.1             pyhd3eb1b0_0  
xz                        5.2.8                h5eee18b_0  
zlib                      1.2.13               h5eee18b_0  


***** Threadpool info *****

[
  {
    "filepath": "/home/ubuntu/scikit-learn/asv_benchmarks/env/90ed7782ee9013f1c8d13fdff8043a99/lib/libgomp.so.1.0.0",
    "prefix": "libgomp",
    "user_api": "openmp",
    "internal_api": "openmp",
    "version": null,
    "num_threads": 8
  },
  {
    "filepath": "/home/ubuntu/scikit-learn/asv_benchmarks/env/90ed7782ee9013f1c8d13fdff8043a99/lib/libmkl_rt.so.1",
    "prefix": "libmkl_rt",
    "user_api": "blas",
    "internal_api": "mkl",
    "version": "2021.4-Product",
    "num_threads": 8,
    "threading_layer": "intel"
  },
  {
    "filepath": "/home/ubuntu/scikit-learn/asv_benchmarks/env/90ed7782ee9013f1c8d13fdff8043a99/lib/libiomp5.so",
    "prefix": "libiomp",
    "user_api": "openmp",
    "internal_api": "openmp",
    "version": null,
    "num_threads": 8
  }
]


***** System info *****

Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              8
On-line CPU(s) list: 0-7
Thread(s) per core:  1
Core(s) per socket:  1
Socket(s):           8
NUMA node(s):        1
Vendor ID:           GenuineIntel
CPU family:          6
Model:               60
Model name:          Intel Core Processor (Haswell, no TSX)
Stepping:            1
CPU MHz:             2294.686
BogoMIPS:            4589.37
Hypervisor vendor:   KVM
Virtualization type: full
L1d cache:           32K
L1i cache:           32K
L2 cache:            4096K
L3 cache:            16384K
NUMA node0 CPU(s):   0-7
Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology cpuid pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm invpcid_single pti fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid xsaveopt arat
MemTotal:       16424676 kB
